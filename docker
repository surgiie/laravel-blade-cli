#!/bin/bash
set -euo pipefail
command="${1:-}"
path="${2:-}"

if [ -z "$path" ]; then
    echo "Usage: $0 <path> [options]"
    exit 1
fi

version="0.1.0"
# The container name to use.
container_name="laravel-blade-cli-$version"

# Is TTY supported?
test -t 1 && USE_TTY="-t"

# Create a workspace area for temporary files to do build with.
workspace="./.laravel-blade-cli"
mkdir -p $workspace

cd $workspace

cat > Dockerfile <<EOF
FROM php:8.3-cli-alpine

RUN addgroup -g 1000 php && adduser -u 1000 -S php -G php

WORKDIR /app
ARG PHP_EXTS="pcntl"
ARG DEBIAN_FRONTEND=noninteractive

RUN apk --no-cache update \\
    && docker-php-ext-install -j\$(nproc) \${PHP_EXTS} \\
    && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \\
    && chown -R php:php /app/

USER php

RUN composer require surgiie/laravel-blade-cli:$version
ENV PATH=\$PATH:/app/vendor/bin

EOF
image_tag="laravel-blade-cli:$version"

# Build docker image for the cli if not already present or allow with a flag to force build.
if  [ -z "$(docker images -q $image_tag)" ]
then
    docker build -t $image_tag . --no-cache
fi
if [ $? -ne 0 ];
then
    echo "Failed to build docker image $image_tag"
    exit 1
fi

# Change back to the original directory after we have built the docker image.
cd - > /dev/null
# Remove the workspace after we have built the docker image, these files are no longer needed.
rm -rf $workspace

# Start up a container and keep running it if it is not already running.
if [ ! "$( docker container inspect -f '{{.State.Running}}' $container_name 2>/dev/null)" = "true" ];
then
    # remove dangling containers that may have exited but still show up during docker ps -a
    docker ps -a | grep $container_name > /dev/null && docker rm $container_name > /dev/null
    docker run --name $container_name -i ${USE_TTY} -d --user $(id -u):$(id -g) $image_tag tail -f /dev/null > /dev/null
fi

cli_args=""
save_to=""
shift
shift
for arg in "$@"; do
    if [[ $arg == --save-to=* ]]; then
        save_to="${arg#--save-to=}"
    else
        cli_args="$cli_args $arg"
        continue
    fi
done

if [ "$command" != "render" ]; then
    docker exec -i ${USE_TTY} $container_name "laravel-blade" "$command" "${@}"
    exit $?
fi

if [[ ! -f $path ]] && [[ ! -d $path ]];
then
    echo "The $path file or directory doesnt exist."
    exit 1;
fi

docker exec -i ${USE_TTY} $container_name rm -rf /app/files
docker exec -i ${USE_TTY} $container_name mkdir -p /app/files
docker cp $path $container_name:/app/files/$path > /dev/null

if [ $? -ne 0 ];
then
    echo "Failed to copy the render file $path to container"
    exit 1
fi

docker exec -i ${USE_TTY} $container_name "laravel-blade" "render" "/app/files/$path" ${cli_args[@]}
if [ $? -ne 0 ];
then
    echo "Failed to render the file $path"
    exit 1
fi


if [ ! -z "$save_to" ]; then
    rendered_filename=$save_to
else

    extension="${path##*.}"
    if [[ "$path" == *.* ]]; then
        extension="${filename##*.}"
    else
        extension=""  # No extension
    fi

    if [ ! -z "$extension" ]; then
        base_name=$(basename $path .$extension)
        rendered_filename=$base_name.rendered.$extension
        host_filename=$rendered_filename
    else
        rendered_filename=$path.rendered
        host_filename=$path.rendered
    fi
fi

if [ -z $save_to ];
then
    docker cp $container_name:/app/files/$rendered_filename $host_filename > /dev/null
else
    echo "TODO SAVE CUSTOM"
    # dir_name=$(dirname $save_to)
    # mkdir -p $dir_name
    # docker cp $container_name:$save_to $filename > /dev/null
fi

# if [ $? -ne 0 ];
# then
#     echo "Failed to copy the rendered file $filename"
#     exit 1
# fi
echo "Rendered file $host_filename"
